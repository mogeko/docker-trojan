name: update-bot

on:
  push:
    branches:
      - master
  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      trojan_ver: ${{ steps.check_ver.outputs.trojan_ver }}
      img_ver: ${{ steps.check_ver.outputs.img_ver }}
      is_new: ${{ steps.check_ver.outputs.is_new }}
      is_meta_new: ${{ steps.check_ver.outputs.is_meta_new }}
      latest: ${{ steps.check_ver.outputs.latest }}
      edge: ${{ steps.check_ver.outputs.edge }}
      edge_sha: ${{ steps.check_ver.outputs.edge_sha }}
      latest_sha: ${{ steps.check_ver.outputs.edge_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v2
      - name: Check version
        id: check_ver
        run: |
          export STATUS_EDGE_SHA=3e7bb9aecdc694f9bcae8d646fae395f773d60f8
          export STATUS_LATEST_SHA=8606b7110fe79f8ab02d60c897f87ffb0a9b23f0
          export TROJAN_VER=$(curl -s "${API_REPO_TAGS}" | jq -r '.[0].name')
          export EDGE_SHA=$(curl -s "${API_REPO_REFS}/heads/master" | jq -r '.object.sha')
          export LATEST_SHA=$(curl -s "${API_REPO_REFS}/tags/${NEW_TAG}" | jq -r '.object.sha')
          export TIMESTAMP_UTC=$(date -u "+%Y-%m-%dT%H:%M:%SZ")
          envsubst < ./public/index.json.template > ./public/index.json
          rm -rf ./public/index.json.template
          if [[ ! ${STATUS_EDGE_SHA} =~ ${EDGE_SHA} ]]; then
            echo "::set-output name=is_new::yes"
            echo "::set-output name=is_meta_new::yes"
            echo "::set-output name=edge::type=edge"
            echo "::set-output name=edge_sha::type=raw,${EDGE_SHA:0:7}"
            echo "::set-output name=trojan_ver::master"
          fi
          if [[ ! ${STATUS_LATEST_SHA} =~ ${LATEST_SHA} ]]; then
            echo "::set-output name=is_new::yes"
            echo "::set-output name=is_meta_new::yes"
            echo "::set-output name=latest::type=raw,latest"
            echo "::set-output name=img_ver::type=raw,${TROJAN_VER#v}"
            echo "::set-output name=latest_sha::type=raw,${LATEST_SHA:0:7}"
            echo "::set-output name=trojan_ver::${TROJAN_VER}"
          fi
          echo "::set-output name=is_meta_new::yes"
        env:
          API_STATUS_META: ${{ steps.pages.outputs.base_url }}/index.json
          API_REPO_TAGS: https://api.github.com/repos/trojan-gfw/trojan/tags
          API_REPO_REFS: https://api.github.com/repos/trojan-gfw/trojan/git/refs
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./public

  github-pages:
    if: github.ref_name == 'master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  docker:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.is_new == 'yes' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: |
            ${{ github.repository_owner }}/trojan
            ghcr.io/${{ github.repository_owner }}/trojan
          tags: |
            type=schedule,pattern={{date 'YYYYMMDD'}}
            ${{ needs.check.outputs.img_ver }}
            ${{ needs.check.outputs.latest }}
            ${{ needs.check.outputs.edge }}
            ${{ needs.check.outputs.latest_sha }}
            ${{ needs.check.outputs.edge_sha }}
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TROJAN_VERSION=${{ needs.check.outputs.trojan_ver }}
      - name: Save metadata
        run: echo ${{ toJSON(steps.build.outputs.metadata) }} > ${{ github.workspace }}/meta.json

      - name: Update metadata
        uses: actions/upload-artifact@v3.1.0
        with:
          name: metadata
          path: ${{ github.workspace }}/meta.json
